PROJECT_NAME ?= todobackend
ORG_NAME ?= caqp13
REPO_NAME ?= todobackend

DEV_COMPOSE_FILE := docker/dev/docker-compose.yml
REL_COMPOSE_FILE := docker/release/docker-compose.yml

DEV_PROJECT_NAME := $(PROJECT_NAME)DEV
REL_PROJECT_NAME := $(PROJECT_NAME)$(BUILD_ID)

# Application Service Name - must match Docker Compose release specification application service name
APP_SERVICE_NAME := app

# Build tag expression - can be used to evaulate a shell expression at runtime
BUILD_TAG_EXPRESSION ?= date -u +%Y%m%d%H%M%S

# Execute shell expression
BUILD_EXPRESSION := $(shell $(BUILD_TAG_EXPRESSION))

# Build tag - defaults to BUILD_EXPRESSION if not defined
BUILD_TAG ?= $(BUILD_EXPRESSION)



INSPECT := $$( docker-compose -p $$1 -f $$2 ps -q $$3 | xargs -I ARGS docker inspect -f "{{ .State.ExitCode }}" ARGS)
CHECK := @bash -c ' \
	if [[ $(INSPECT) -ne 0 ]]; \
	then exit $(INSPECT); fi' VALUE

DOCKER_REGISTRY ?= docker.io
DOCKER_REGISTRY_AUTH ?=


.PHONY: test build release tag buildtag
test:
	${INFO} "pulling the latest images from the registry"
	docker-compose -p $(DEV_PROJECT_NAME) -f $(DEV_COMPOSE_FILE) pull
	${INFO} "Building docker images on DEV"
	docker-compose -p $(DEV_PROJECT_NAME) -f $(DEV_COMPOSE_FILE) build --pull
	${INFO} "probing if mysql is up and running"
	docker-compose -p $(DEV_PROJECT_NAME) -f $(DEV_COMPOSE_FILE) run --rm agent
	${INFO} "Kicking off tests and integration on DEV"
	docker-compose -p $(DEV_PROJECT_NAME) -f $(DEV_COMPOSE_FILE) up test
	${CHECK} $(DEV_PROJECT_NAME) $(DEV_COMPOSE_FILE) test
build:
	${INFO} "Building artifacts on DEV"
	docker-compose -p $(DEV_PROJECT_NAME) -f $(DEV_COMPOSE_FILE) up builder
	${INFO} "copying artifacts to docker client"
	@ docker cp $$( docker-compose -p $(DEV_PROJECT_NAME) -f $(DEV_COMPOSE_FILE) ps -q builder ):/wheelhouse/. target 

release:
	${INFO} "Building docker images for Release environment"
	@ docker-compose -p $(REL_PROJECT_NAME) -f $(REL_COMPOSE_FILE) pull test
	docker-compose -p $(REL_PROJECT_NAME) -f $(REL_COMPOSE_FILE) build
	${INFO} "probe MYSQL is up and running"
	docker-compose -p $(REL_PROJECT_NAME) -f $(REL_COMPOSE_FILE) up agent
	${INFO} "application dependencies to be run"
	docker-compose -p $(REL_PROJECT_NAME) -f $(REL_COMPOSE_FILE) run --rm app manage.py collectstatic --noinput
	docker-compose -p $(REL_PROJECT_NAME) -f $(REL_COMPOSE_FILE) run --rm app manage.py migrate --noinput
	${INFO} "Probe app and nginx are up and running"
	docker-compose -p $(REL_PROJECT_NAME) -f $(REL_COMPOSE_FILE) up agent_1
	${INFO} "Installing the artifacts and kicking off acceptance tests"
	docker-compose -p $(REL_PROJECT_NAME) -f $(REL_COMPOSE_FILE) up test

clean:
	${INFO} "Destroying dev Environment"
	docker-compose -p $(DEV_PROJECT_NAME) -f $(DEV_COMPOSE_FILE) kill
	docker-compose -p $(DEV_PROJECT_NAME) -f $(DEV_COMPOSE_FILE) rm -f -v
	${INFO} "Destroying release Environment"
	docker-compose -p $(REL_PROJECT_NAME) -f $(REL_COMPOSE_FILE) kill
	docker-compose -p $(REL_PROJECT_NAME) -f $(REL_COMPOSE_FILE) rm -f -v
	${INFO} "Destroying dangling images"
	docker images -q -f dangling=true -f label=application=$(REPO_NAME) | xargs -I ARGS docker rmi -f ARGS
	${INFO} "Destroying dangling volumes"
	docker volume ls -q -f dangling=true | xargs -I ARGS docker volume rm ARGS


tag:
	${INFO} "Tagging release image with tags $(TAG_ARGS)..."
	@ $(foreach tag,$(TAG_ARGS), docker tag $(IMAGE_ID) $(DOCKER_REGISTRY)/$(ORG_NAME)/$(REPO_NAME):$(tag);)
	${INFO} "Tagging complete"

buildtag:
	${INFO} "Tagging release image with suffix $(BUILD_TAG) and build tags $(BUILDTAG_ARGS)..."
	@ $(foreach tag,$(BUILDTAG_ARGS), docker tag $(IMAGE_ID) $(DOCKER_REGISTRY)/$(ORG_NAME)/$(REPO_NAME):$(tag).$(BUILD_TAG);)
	${INFO} "Tagging complete"




YELLOW := "\e[1;33m"
NC := "\e[0m"

INFO := @bash -c '\
	printf $(YELLOW); \
	echo "=> $$1"; \
	printf $(NC)' VALUE

# Get container id of application service container
APP_CONTAINER_ID := $$(docker-compose -p $(REL_PROJECT) -f $(REL_COMPOSE_FILE) ps -q $(APP_SERVICE_NAME))

# Get image id of application service
IMAGE_ID := $$(docker inspect -f '{{ .Image }}' $(APP_CONTAINER_ID))

# Repository Filter
ifeq ($(DOCKER_REGISTRY), docker.io)
	REPO_FILTER := $(ORG_NAME)/$(REPO_NAME)[^[:space:]|\$$]*
else
	REPO_FILTER := $(DOCKER_REGISTRY)/$(ORG_NAME)/$(REPO_NAME)[^[:space:]|\$$]*
endif


# Get container id of application service container
APP_CONTAINER_ID := $$(docker-compose -p $(REL_PROJECT) -f $(REL_COMPOSE_FILE) ps -q $(APP_SERVICE_NAME))

# Get image id of application service
IMAGE_ID := $$(docker inspect -f '{{ .Image }}' $(APP_CONTAINER_ID))

# Repository Filter
ifeq ($(DOCKER_REGISTRY), docker.io)
	REPO_FILTER := $(ORG_NAME)/$(REPO_NAME)[^[:space:]|\$$]*
else
	REPO_FILTER := $(DOCKER_REGISTRY)/$(ORG_NAME)/$(REPO_NAME)[^[:space:]|\$$]*
endif

# Introspect repository tags
REPO_EXPR := $$(docker inspect -f '{{range .RepoTags}}{{.}} {{end}}' $(IMAGE_ID) | grep -oh "$(REPO_FILTER)" | xargs)

# Extract build tag arguments
ifeq (buildtag,$(firstword $(MAKECMDGOALS)))
	BUILDTAG_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
  ifeq ($(BUILDTAG_ARGS),)
  	$(error You must specify a tag)
  endif
  $(eval $(BUILDTAG_ARGS):;@:)
endif

# Extract tag arguments
ifeq (tag,$(firstword $(MAKECMDGOALS)))
  TAG_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
  ifeq ($(TAG_ARGS),)
    $(error You must specify a tag)
  endif
  $(eval $(TAG_ARGS):;@:)
endif

